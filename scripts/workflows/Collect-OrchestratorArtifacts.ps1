# Collect and Prepare EasyPIM Orchestrator Execution Artifacts
# This script handles artifact collection and manifest creation

param(
    [Parameter(Mandatory = $true)]
    [string]$RunId,

    [Parameter(Mandatory = $true)]
    [string]$RunNumber,

    [Parameter(Mandatory = $true)]
    [string]$JobStatus,

    [Parameter(Mandatory = $true)]
    [string]$WhatIf,

    [Parameter(Mandatory = $true)]
    [string]$Mode,

    [Parameter(Mandatory = $true)]
    [string]$SecretName,

    [Parameter(Mandatory = $true)]
    [string]$KeyVaultName,

    [Parameter(Mandatory = $false)]
    [string]$ConfigSecretName = ""
)

Write-Host "üì¶ Preparing execution artifacts..." -ForegroundColor Cyan

# Create artifacts directory
$artifactsDir = "./workflow-artifacts"
New-Item -ItemType Directory -Path $artifactsDir -Force | Out-Null

# Collect available log files and outputs
$artifactFiles = @()

# Check for common log locations
$logPaths = @(
    "./LOGS/",
    "./*.log",
    "./*.json",
    "./would-remove-export.json",
    "./easypim-summary.json",
    "./easypim-error.json",
    "./easypim-module-versions.json"
)

foreach ($path in $logPaths) {
    $files = Get-ChildItem -Path $path -ErrorAction SilentlyContinue
    if ($files) {
        $files | Copy-Item -Destination $artifactsDir -Force -ErrorAction SilentlyContinue
        $artifactFiles += $files.Name
    }
}

# Create a comprehensive manifest file
$manifest = @{
    "RunId" = $RunId
    "RunNumber" = $RunNumber
    "Status" = $JobStatus
    "Timestamp" = (Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ")
    "Configuration" = @{
        "WhatIf" = $WhatIf
        "Mode" = $Mode
        "ConfigSecret" = $SecretName
        "Vault" = $KeyVaultName
        "EventDriven" = ($ConfigSecretName -ne "")
        "ConfigSecretName" = $ConfigSecretName
    }
    "Files" = $artifactFiles
    "Environment" = @{
        "PowerShellVersion" = $PSVersionTable.PSVersion.ToString()
        "Platform" = $PSVersionTable.Platform
        "OS" = $PSVersionTable.OS
    }
}

$manifest | ConvertTo-Json -Depth 3 | Out-File -FilePath "$artifactsDir/execution-manifest.json" -Encoding utf8

# Create summary for artifacts
if ($artifactFiles.Count -gt 0) {
    Write-Host "‚úÖ Collected $($artifactFiles.Count) artifact files" -ForegroundColor Green
    $artifactFiles | ForEach-Object { Write-Host "   üìÑ $_" -ForegroundColor White }
} else {
    Write-Host "‚ÑπÔ∏è No log files found to archive" -ForegroundColor Yellow
    # Create a placeholder file so the artifact upload doesn't fail
    "No execution logs were generated during this run." | Out-File -FilePath "$artifactsDir/no-logs.txt" -Encoding utf8
}

# Create a detailed execution report
$executionReport = @"
# EasyPIM Orchestrator Execution Report

## Run Information
- **Run ID:** $RunId
- **Run Number:** #$RunNumber
- **Status:** $JobStatus
- **Timestamp:** $(Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC")

## Configuration
- **What-If Mode:** $WhatIf
- **Execution Mode:** $Mode
- **Key Vault:** $KeyVaultName
- **Secret Name:** $SecretName
- **Event-Driven:** $($ConfigSecretName -ne "")
$(if ($ConfigSecretName) { "- **Triggered by Secret:** $ConfigSecretName" } else { "" })

## Artifacts Collected
$(if ($artifactFiles.Count -gt 0) {
    $artifactFiles | ForEach-Object { "- $_" }
} else {
    "- No artifacts generated"
})

## Environment
- **PowerShell Version:** $($PSVersionTable.PSVersion)
- **Platform:** $($PSVersionTable.Platform)
- **Operating System:** $($PSVersionTable.OS)

---
*Generated by EasyPIM Event-Driven Governance v1.1*
"@

$executionReport | Out-File -FilePath "$artifactsDir/execution-report.md" -Encoding utf8

Write-Host "üìã Execution report and manifest created" -ForegroundColor Green
Write-Host "‚úÖ Artifacts prepared for upload" -ForegroundColor Green

return $true
