name: 'Phase 3: PIM Policy Drift Detection'

on:
  workflow_dispatch:
    inputs:
      Verbose:
        description: "Enable verbose output"
        required: false
        default: false
        type: boolean
  schedule:
    # Run daily at 6 AM UTC (optional automated drift detection)
    - cron: '0 6 * * *'

env:
  KEYVAULT_NAME: ${{ vars.AZURE_KEYVAULT_NAME }}
  SECRET_NAME: ${{ vars.AZURE_KEYVAULT_SECRET_NAME }}
  TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}

permissions:
  id-token: write   # for OIDC
  contents: read

jobs:
  policy-drift-check:
    name: 'Policy Drift Detection'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Azure OIDC Login'
        uses: azure/login@v2
        with:
          tenant-id: ${{ env.TENANT_ID }}
          subscription-id: ${{ env.SUBSCRIPTION_ID }}
          client-id: ${{ env.AZURE_CLIENT_ID }}
          enable-AzPSSession: true

      - name: 'Setup Authentication'
        shell: pwsh
        run: |
          $authResult = & "./scripts/workflows/Setup-EasyPIMAuthentication.ps1" -TenantId "$env:TENANT_ID" -SubscriptionId "$env:SUBSCRIPTION_ID" -ClientId "$env:AZURE_CLIENT_ID"
          if (-not $authResult) {
            Write-Error "‚ùå Authentication setup failed"
            exit 1
          }

      - name: 'Install EasyPIM Modules'
        shell: pwsh
        run: |
          & "./scripts/workflows/Install-EasyPIMModules.ps1"

      - name: 'Configure Drift Detection Parameters'
        id: config
        shell: pwsh
        run: |
          Write-Host "ÔøΩ Configuring drift detection parameters..." -ForegroundColor Cyan

          $verbose = '${{ github.event.inputs.Verbose }}' -eq 'true'

          if ($verbose) {
              Write-Host "üìù Verbose output enabled"
          }

          # Build drift detection parameters
          $driftParams = @{
              'TenantId' = $env:TENANT_ID
              'SubscriptionId' = $env:SUBSCRIPTION_ID
          }

          # Configuration source - check KeyVault native support first, fallback to temp file
          if ($env:KEYVAULT_NAME) {
              Write-Host "üìã Using configuration from Key Vault: $env:KEYVAULT_NAME" -ForegroundColor Green

              # Test native KeyVault support first - add both methods for compatibility
              $driftParams['KeyVaultName'] = $env:KEYVAULT_NAME
              $driftParams['SecretName'] = $env:SECRET_NAME

              # Also prepare temp file as fallback (will be removed once native support is confirmed)
              Write-Host "üîÑ Also preparing temp file for compatibility..." -ForegroundColor Yellow
              $configJson = az keyvault secret show --vault-name $env:KEYVAULT_NAME --name $env:SECRET_NAME --query "value" -o tsv

              if ([string]::IsNullOrEmpty($configJson)) {
                  Write-Error "‚ùå Failed to retrieve config from Key Vault - empty response"
                  exit 1
              }

              $tempConfigPath = "./temp-drift-config.json"
              $configJson | Out-File -FilePath $tempConfigPath -Encoding UTF8
              $driftParams['ConfigPath'] = $tempConfigPath

              Write-Host "‚úÖ Retrieved config successfully (Length: $($configJson.Length) chars)" -ForegroundColor Green
          } else {
              Write-Error "‚ùå No Key Vault configuration found. AZURE_KEYVAULT_NAME variable is required."
              exit 1
          }

          # Add conditional parameters
          if ($verbose) {
              $driftParams['Verbose'] = $true
              Write-Host "üìù Verbose output enabled" -ForegroundColor Blue
          }

          Write-Host "üéØ Drift Detection Parameters:" -ForegroundColor Blue
          Write-Host "   TenantId: $env:TENANT_ID"
          Write-Host "   SubscriptionId: $env:SUBSCRIPTION_ID"
          if ($env:KEYVAULT_NAME) {
              Write-Host "   KeyVaultName: $env:KEYVAULT_NAME"
              Write-Host "   SecretName: $env:SECRET_NAME"
              Write-Host "   ConfigPath: $($driftParams['ConfigPath']) (fallback)"
          } else {
              Write-Host "   ‚ùå Key Vault configuration required but not provided"
          }
          if ($verbose) {
              Write-Host "   Verbose: enabled"
          }

          # Store parameters as step output instead of environment variable
          $paramsJson = ($driftParams | ConvertTo-Json -Depth 3 -Compress)
          "drift-params=$paramsJson" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Host "‚úÖ Parameters configured successfully" -ForegroundColor Green

      - name: 'Execute Policy Drift Detection'
        id: drift_exec
        shell: pwsh
        run: |
          # Retrieve parameters from step output
          $driftParamsJson = '${{ steps.config.outputs.drift-params }}'
          Write-Host "üì• Retrieved parameters JSON: $($driftParamsJson.Substring(0, [Math]::Min(100, $driftParamsJson.Length)))..." -ForegroundColor Gray

          $driftParams = $driftParamsJson | ConvertFrom-Json -AsHashtable
          $graphContext = Get-MgContext

          # Execute using the dedicated script
          & "./scripts/workflows/Invoke-EasyPIMDriftDetection.ps1" -DriftParams $driftParams -GraphContext $graphContext

          # Clean up temp file if it was created
          if (Test-Path "./temp-drift-config.json") {
              Remove-Item "./temp-drift-config.json" -ErrorAction SilentlyContinue
              Write-Host "üßπ Cleaned up temporary config file" -ForegroundColor Gray
          }

          # Surface drift summary to GitHub step outputs if present
          if (Test-Path './drift-summary.json') {
              $json = Get-Content './drift-summary.json' -Raw
              Write-Host "üìÑ Drift summary JSON found, length: $($json.Length)" -ForegroundColor Green

              $parsed = $json | ConvertFrom-Json
              $driftCount = $parsed.driftCount
              $driftDetected = $parsed.driftDetected

              Write-Host "üîç Parsed drift results:" -ForegroundColor Cyan
              Write-Host "   driftDetected: $driftDetected" -ForegroundColor White
              Write-Host "   driftCount: $driftCount" -ForegroundColor White

              "drift-detected=$driftDetected" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              "drift-count=$driftCount" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

              Write-Host "‚úÖ Step outputs set:" -ForegroundColor Green
              Write-Host "   drift-detected=$driftDetected" -ForegroundColor White
              Write-Host "   drift-count=$driftCount" -ForegroundColor White

              if ($parsed.drift -and $parsed.drift.Count -gt 0) {
                $first = ($parsed.drift | Select-Object -First 5 | ConvertTo-Json -Compress)
                "drift-sample=$first" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
                Write-Host "   drift-sample set (length: $($first.Length))" -ForegroundColor White
              }
          } else {
              Write-Host "‚ö†Ô∏è No drift-summary.json found, setting defaults" -ForegroundColor Yellow
              "drift-detected=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              "drift-count=0" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              Write-Host "‚úÖ Default step outputs set: drift-detected=false, drift-count=0" -ForegroundColor Green
          }

      - name: 'Upload Drift Detection Results'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: policy-drift-results-${{ github.run_number }}
          path: |
            LOGS/*.log
            *.log
            drift-report.*
          retention-days: 30

      - name: 'Generate Workflow Summary'
        if: always()
        shell: pwsh
        run: |
          Write-Host "üîç Generating workflow summary..." -ForegroundColor Cyan

          $driftStatus = '${{ job.status }}'
          $driftDetected = '${{ steps.drift_exec.outputs.drift-detected }}'
          $driftCount = '${{ steps.drift_exec.outputs.drift-count }}'

          Write-Host "üìä Summary values:" -ForegroundColor Yellow
          Write-Host "   Job Status: $driftStatus" -ForegroundColor White
          Write-Host "   Drift Detected: $driftDetected" -ForegroundColor White
          Write-Host "   Drift Count: $driftCount" -ForegroundColor White

          $summary = @"
          # üîç PIM Policy Drift Detection Results - Phase 3

          **Workflow Run:** ${{ github.run_number }}
          **Triggered by:** ${{ github.event_name }}
          **Branch:** ${{ github.ref_name }}

          "@

          if ($driftStatus -ne "success") {
            $summary += @"
          ## ‚ùå Policy Drift Detection Job Failed
          - Execution error prevented drift evaluation

          "@
          } else {
            if ($driftDetected -eq 'true' -and $driftCount -ne '0') {
              $summary += @"
          ## ‚ö†Ô∏è Drift Detected ($driftCount item(s))
          - Policy drift identified in one or more items
          - Review artifact: drift-summary.json

          ### Sample (first 5)
          ```json
          ${{ steps.drift_exec.outputs.drift-sample }}
          ```

          "@
            } else {
              $summary += @"
          ## ‚úÖ No Drift Detected
          - All evaluated items match desired configuration

          "@
            }
          }

          $summary += @"
          ## üìä Execution Summary
          - **Verbose**: ${{ github.event.inputs.Verbose || 'false' }}
          - **Configuration Source**: ${{ vars.AZURE_KEYVAULT_NAME && 'Azure Key Vault' || 'Local File' }}

          ## üîó Next Steps
          "@

          if ($driftStatus -ne "success") {
            $summary += @"
          1. üìã Review logs for execution error root cause
          2. üîÑ Re-run once issue addressed

          "@
          } else {
            if ($driftDetected -eq 'true' -and $driftCount -ne '0') {
              $summary += @"
          1. ‚ö° Run Phase 2 orchestrator to remediate drift
          2. üîÑ Validate remediation by re-running Phase 3
          3. üóÇÔ∏è Archive drift-summary.json for audit

          "@
            } else {
              $summary += @"
          1. ‚úÖ No action required - policies compliant
          2. üîÑ Maintain scheduled drift checks

          "@
            }
          }

          $summary += @"

          ---
          **üìù Note**: This is Phase 3 - dedicated policy drift detection.
          Use Phase 2 orchestrator workflow to apply configuration changes.
          "@


          # Output summary to GITHUB_STEP_SUMMARY
          $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8
          Write-Host "‚úÖ Workflow summary generated and written to GITHUB_STEP_SUMMARY" -ForegroundColor Green
