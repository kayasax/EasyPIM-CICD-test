name: 'Phase 1: Authentication Test - EasyPIM CI/CD'

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'configs/**'
      - '.github/workflows/01-auth-test.yml'

env:
  KEYVAULT_NAME: ${{ secrets.AZURE_KEY_VAULT_NAME }}
  SECRET_NAME: 'easypim-config-json'
  TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}

permissions:
  id-token: write   # for OIDC
  contents: read

jobs:
  authentication-test:
    name: 'Authentication & Module Verification'
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Azure OIDC Login'
        uses: azure/login@v2
        with:
          tenant-id: ${{ env.TENANT_ID }}
          subscription-id: ${{ env.SUBSCRIPTION_ID }}
          client-id: ${{ env.AZURE_CLIENT_ID }}

      - name: 'Verify Azure CLI Version'
        run: az version

      - name: 'Phase 1 Authentication Test (Per Step 4.2)'
        shell: pwsh
        run: |
          Write-Host "🔐 Phase 1: Authentication Test - Per Step 4.2 Guidelines"
          Write-Host "============================================================"
          Write-Host ""

          # Test 1: EasyPIM Module Installation
          Write-Host "🚀 Test 1: Installing EasyPIM modules from PowerShell Gallery..."
          try {
              Install-Module -Name EasyPIM -Force -Scope CurrentUser -Verbose
              Install-Module -Name EasyPIM.Orchestrator -Force -Scope CurrentUser -Verbose
              Write-Host "✅ EasyPIM modules installed successfully"
          }
          catch {
              Write-Error "❌ Failed to install EasyPIM modules: $_"
              throw
          }

          # Test 2: Module Import
          Write-Host ""
          Write-Host "📦 Test 2: Importing EasyPIM.Orchestrator module..."
          try {
              Import-Module EasyPIM.Orchestrator -Force -Verbose
              Write-Host "✅ EasyPIM modules imported successfully"
          }
          catch {
              Write-Error "❌ Failed to import EasyPIM modules: $_"
              throw
          }

          # Test 3: Key Vault Access (only if Key Vault name is provided)
          Write-Host ""
          Write-Host "🔑 Test 3: Verifying Key Vault access..."
          Write-Host "   Key Vault: $env:KEYVAULT_NAME"
          Write-Host "   Secret Name: $env:SECRET_NAME"
          
          if (-not $env:KEYVAULT_NAME) {
              Write-Warning "⚠️  AZURE_KEY_VAULT_NAME secret not configured"
              Write-Host "   Skipping Key Vault test - configure GitHub secret first"
          } else {
              try {
                  $configContent = az keyvault secret show --vault-name $env:KEYVAULT_NAME --name $env:SECRET_NAME --query "value" -o tsv
                  if ($configContent) {
                      $config = $configContent | ConvertFrom-Json
                      Write-Host "✅ Key Vault access confirmed"
                      Write-Host "✅ Configuration retrieved successfully"
                      Write-Host "   Protected Users: $($config.ProtectedUsers.Count) configured"
                      if ($config.PolicyTemplates) {
                          Write-Host "   Policy Templates: $($config.PolicyTemplates.PSObject.Properties.Count) configured"
                      }
                      if ($config.EntraRoles) {
                          Write-Host "   Entra Roles: $($config.EntraRoles.PSObject.Properties.Count) configured"
                      }
                      if ($config.AzureResources) {
                          Write-Host "   Azure Resources: $($config.AzureResources.PSObject.Properties.Count) configured"
                      }
                  } else {
                      throw "Configuration is empty or null"
                  }
              }
              catch {
                  Write-Error "❌ Key Vault access failed: $_"
                  Write-Host "💡 Possible issues:"
                  Write-Host "   - AZURE_KEY_VAULT_NAME secret not set correctly"
                  Write-Host "   - Key Vault permissions not configured"
                  Write-Host "   - Secret 'easypim-config-json' doesn't exist"
                  throw
              }
          }

          # Test 4: Microsoft Graph Connectivity (Basic)
          Write-Host ""
          Write-Host "🌐 Test 4: Testing Microsoft Graph connectivity..."
          try {
              # Test Graph connection using the current authenticated context
              $tenantInfo = az rest --method GET --url "https://graph.microsoft.com/v1.0/organization" --query "value[0].{id:id,displayName:displayName}" 2>$null
              if ($tenantInfo) {
                  $tenant = $tenantInfo | ConvertFrom-Json
                  Write-Host "✅ Microsoft Graph connectivity verified"
                  Write-Host "   Tenant: $($tenant.displayName) ($($tenant.id))"
              } else {
                  Write-Warning "⚠️  Could not verify Graph connectivity (may need additional permissions)"
              }
          }
          catch {
              Write-Warning "⚠️  Microsoft Graph connectivity test failed: $_"
              Write-Host "   This may be due to insufficient permissions or network issues"
              Write-Host "   This won't prevent EasyPIM operations if permissions are correctly configured"
          }

          # Test 5: EasyPIM Module Functions Available
          Write-Host ""
          Write-Host "🔧 Test 5: Verifying EasyPIM functions are available..."
          try {
              $commands = Get-Command -Module EasyPIM.Orchestrator
              Write-Host "✅ EasyPIM.Orchestrator commands available: $($commands.Count)"
              $keyCommands = @('Invoke-EasyPIMOrchestrator', 'Test-PIMPolicyDrift')
              foreach ($cmd in $keyCommands) {
                  if (Get-Command $cmd -ErrorAction SilentlyContinue) {
                      Write-Host "   ✅ $cmd available"
                  } else {
                      Write-Warning "   ⚠️  $cmd not found"
                  }
              }
          }
          catch {
              Write-Error "❌ Failed to verify EasyPIM functions: $_"
              throw
          }

          Write-Host ""
          Write-Host "🎉 Phase 1 Authentication Test Complete!"
          Write-Host "============================================"
          Write-Host "All authentication components verified successfully."
          Write-Host "Ready to proceed to Phase 2: EasyPIM Operations"
          Write-Host ""
          Write-Host "⚠️  NOTE: This test does NOT execute EasyPIM operations."
          Write-Host "   Use Phase 2 workflow for actual PIM operations."

  generate-summary:
    name: 'Generate Summary'
    runs-on: ubuntu-latest
    needs: [authentication-test]
    if: always()

    steps:
      - name: 'Generate Workflow Summary'
        run: |
          echo "# 🔐 Phase 1: Authentication Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow Run:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Authentication Test results
          AUTH_STATUS="${{ needs.authentication-test.result }}"
          if [ "$AUTH_STATUS" = "success" ]; then
            echo "## ✅ Authentication Test: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "- All authentication components verified" >> $GITHUB_STEP_SUMMARY
            echo "- EasyPIM modules installed successfully" >> $GITHUB_STEP_SUMMARY
            echo "- Key Vault access confirmed" >> $GITHUB_STEP_SUMMARY
            echo "- Microsoft Graph connectivity verified" >> $GITHUB_STEP_SUMMARY
            echo "- EasyPIM functions available" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Authentication Test: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "- Authentication test failed" >> $GITHUB_STEP_SUMMARY
            echo "- Check logs for detailed error information" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎯 Phase 1 Purpose" >> $GITHUB_STEP_SUMMARY
          echo "This workflow only tests authentication components:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Module installation and import" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Azure OIDC authentication" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Key Vault access and configuration retrieval" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Microsoft Graph connectivity" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ EasyPIM function availability" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔗 Next Steps" >> $GITHUB_STEP_SUMMARY
          if [ "$AUTH_STATUS" = "success" ]; then
            echo "1. ✅ **Authentication verified** - Ready for Phase 2" >> $GITHUB_STEP_SUMMARY
            echo "2. 🚀 **Run Phase 2 workflow** for actual EasyPIM operations" >> $GITHUB_STEP_SUMMARY
          else
            echo "1. 📖 **Review logs** for authentication component failures" >> $GITHUB_STEP_SUMMARY
            echo "2. 🔧 **Check GitHub secrets** if Key Vault access failed" >> $GITHUB_STEP_SUMMARY
            echo "3. 🔄 **Re-run Phase 1** after fixing issues" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "**📝 Note**: No PIM operations are performed in Phase 1." >> $GITHUB_STEP_SUMMARY
