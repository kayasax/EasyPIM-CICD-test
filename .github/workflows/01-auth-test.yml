name: 'Phase 1: Authentication Test - EasyPIM CI/CD'

on:
  workflow_dispatch:
    inputs:
      apply:
        description: "Set to true to apply (omit -WhatIf)"
        required: false
        default: false
        type: boolean
      mode:
        description: "Orchestrator mode"
        required: false
        default: "delta"
        type: choice
        options:
          - delta
          - initial
      skip_policies:
        description: "Skip policy operations"
        required: false
        default: true
        type: boolean
      skip_assignments:
        description: "Skip assignment operations"
        required: false
        default: false
        type: boolean
  push:
    branches: [ main ]
    paths:
      - 'configs/**'
      - '.github/workflows/01-auth-test.yml'
  schedule:
    - cron: '15 2 * * *'  # Daily 02:15 UTC drift check (delta mode)

env:
  KEYVAULT_NAME: ${{ secrets.KEYVAULT_NAME }}
  SECRET_NAME: 'easypim-config-json'
  TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}

permissions:
  id-token: write   # for OIDC
  contents: read

jobs:
  authentication-test:
    name: 'Authentication & Module Verification'
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Azure OIDC Login'
        uses: azure/login@v2
        with:
          tenant-id: ${{ env.TENANT_ID }}
          subscription-id: ${{ env.SUBSCRIPTION_ID }}
          client-id: ${{ env.AZURE_CLIENT_ID }}

      - name: 'Verify Azure CLI Version'
        run: az version

      - name: 'Authentication Test (Phase 1)'
        shell: pwsh
        run: |
          Write-Host "ÔøΩ Phase 1: Authentication Test - Per Step 4.2 Guidelines"
          Write-Host "============================================================"
          Write-Host ""

          # Test 1: EasyPIM Module Installation
          Write-Host "üöÄ Test 1: Installing EasyPIM modules from PowerShell Gallery..."
          try {
              Install-Module -Name EasyPIM -Force -Scope CurrentUser -Verbose
              Install-Module -Name EasyPIM.Orchestrator -Force -Scope CurrentUser -Verbose
              Write-Host "‚úÖ EasyPIM modules installed successfully"
          }
          catch {
              Write-Error "‚ùå Failed to install EasyPIM modules: $_"
              throw
          }

          # Test 2: Module Import
          Write-Host ""
          Write-Host "üì¶ Test 2: Importing EasyPIM.Orchestrator module..."
          try {
              Import-Module EasyPIM.Orchestrator -Force -Verbose
              Write-Host "‚úÖ EasyPIM modules imported successfully"
          }
          catch {
              Write-Error "‚ùå Failed to import EasyPIM modules: $_"
              throw
          }

          # Test 3: Key Vault Access
          Write-Host ""
          Write-Host "ÔøΩ Test 3: Verifying Key Vault access..."
          Write-Host "   Key Vault: $env:KEYVAULT_NAME"
          Write-Host "   Secret Name: $env:SECRET_NAME"
          try {
              $configContent = az keyvault secret show --vault-name $env:KEYVAULT_NAME --name $env:SECRET_NAME --query "value" -o tsv
              if ($configContent) {
                  $config = $configContent | ConvertFrom-Json
                  Write-Host "‚úÖ Key Vault access confirmed"
                  Write-Host "‚úÖ Configuration retrieved successfully"
                  Write-Host "   Protected Users: $($config.ProtectedUsers.Count) configured"
                  if ($config.PolicyTemplates) {
                      Write-Host "   Policy Templates: $($config.PolicyTemplates.PSObject.Properties.Count) configured"
                  }
                  if ($config.EntraRoles) {
                      Write-Host "   Entra Roles: $($config.EntraRoles.PSObject.Properties.Count) configured"
                  }
                  if ($config.AzureResources) {
                      Write-Host "   Azure Resources: $($config.AzureResources.PSObject.Properties.Count) configured"
                  }
              } else {
                  throw "Configuration is empty or null"
              }
          }
          catch {
              Write-Error "‚ùå Key Vault access failed: $_"
              throw
          }

          # Test 4: Microsoft Graph Connectivity (Basic)
          Write-Host ""
          Write-Host "üåê Test 4: Testing Microsoft Graph connectivity..."
          try {
              # Test Graph connection using the current authenticated context
              $tenantInfo = az rest --method GET --url "https://graph.microsoft.com/v1.0/organization" --query "value[0].{id:id,displayName:displayName}" 2>$null
              if ($tenantInfo) {
                  $tenant = $tenantInfo | ConvertFrom-Json
                  Write-Host "‚úÖ Microsoft Graph connectivity verified"
                  Write-Host "   Tenant: $($tenant.displayName) ($($tenant.id))"
              } else {
                  Write-Warning "‚ö†Ô∏è  Could not verify Graph connectivity (may need additional permissions)"
              }
          }
          catch {
              Write-Warning "‚ö†Ô∏è  Microsoft Graph connectivity test failed: $_"
              Write-Host "   This may be due to insufficient permissions or network issues"
              Write-Host "   This won't prevent EasyPIM operations if permissions are correctly configured"
          }

          # Test 5: EasyPIM Module Functions Available
          Write-Host ""
          Write-Host "üîß Test 5: Verifying EasyPIM functions are available..."
          try {
              $commands = Get-Command -Module EasyPIM.Orchestrator
              Write-Host "‚úÖ EasyPIM.Orchestrator commands available: $($commands.Count)"
              $keyCommands = @('Invoke-EasyPIMOrchestrator', 'Test-PIMPolicyDrift')
              foreach ($cmd in $keyCommands) {
                  if (Get-Command $cmd -ErrorAction SilentlyContinue) {
                      Write-Host "   ‚úÖ $cmd available"
                  } else {
                      Write-Warning "   ‚ö†Ô∏è  $cmd not found"
                  }
              }
          }
          catch {
              Write-Error "‚ùå Failed to verify EasyPIM functions: $_"
              throw
          }

          Write-Host ""
          Write-Host "üéâ Phase 1 Authentication Test Complete!"
          Write-Host "============================================"
          Write-Host "All authentication components verified successfully."
          Write-Host "Ready to proceed to Phase 2: Configuration Validation"
          Write-Host ""
          Write-Host "‚ö†Ô∏è  NOTE: This test does NOT execute EasyPIM operations."
          Write-Host "   Use Phase 2+ workflows for actual PIM operations."

      - name: 'Upload EasyPIM Logs'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: easypim-logs-${{ github.run_number }}
          path: |
            LOGS/*.log
            *.log
          retention-days: 30

  policy-drift-check:
    name: 'Policy Drift Detection'
    runs-on: ubuntu-latest
    needs: authentication-test
    if: always() && !cancelled()

    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Azure OIDC Login'
        uses: azure/login@v2
        with:
          tenant-id: ${{ env.TENANT_ID }}
          subscription-id: ${{ env.SUBSCRIPTION_ID }}
          client-id: ${{ env.AZURE_CLIENT_ID }}

      - name: 'Test PIM Policy Drift'
        shell: pwsh
        run: |
          Write-Host "üîç Installing EasyPIM modules for drift detection..."

          # Install required modules
          Install-Module -Name EasyPIM -Force -Scope CurrentUser
          Install-Module -Name EasyPIM.Orchestrator -Force -Scope CurrentUser
          Import-Module EasyPIM.Orchestrator -Force

          Write-Host "üîç Running policy drift detection..."

          # Build drift check parameters with correct parameter names
          # TODO: Future enhancement - when EasyPIM adds native AKV support for Test-PIMPolicyDrift,
          # we can simplify this to: Test-PIMPolicyDrift -KeyVaultName $env:KEYVAULT_NAME -SecretName $env:SECRET_NAME
          $driftParams = @{
              'TenantId' = $env:TENANT_ID
              'SubscriptionId' = $env:SUBSCRIPTION_ID
          }

          # Use Key Vault configuration (current workaround approach)
          # NOTE: Current implementation downloads config to temp file since Test-PIMPolicyDrift
          # doesn't yet support KeyVault parameters directly. This will be simplified in future versions.
          if ($env:KEYVAULT_NAME) {
              Write-Host "üìã Using configuration from Key Vault: $env:KEYVAULT_NAME"
              # Get the configuration from Key Vault and save to temp file
              $configJson = az keyvault secret show --vault-name $env:KEYVAULT_NAME --name $env:SECRET_NAME --query "value" -o tsv
              $tempConfigPath = "./temp-drift-config.json"
              $configJson | Out-File -FilePath $tempConfigPath -Encoding UTF8

              # Run drift detection with file (Test-PIMPolicyDrift doesn't support KeyVault params directly)
              Test-PIMPolicyDrift -TenantId $env:TENANT_ID -SubscriptionId $env:SUBSCRIPTION_ID -ConfigPath $tempConfigPath

              # Clean up temp file
              Remove-Item $tempConfigPath -ErrorAction SilentlyContinue
          } else {
              Write-Host "üìã Using local configuration file"
              Test-PIMPolicyDrift -TenantId $env:TENANT_ID -SubscriptionId $env:SUBSCRIPTION_ID -ConfigPath "./configs/pim-config.json"
          }

          Write-Host "ÔøΩ Attempting policy drift detection with parameters:"
          $driftParams.Keys | ForEach-Object { Write-Host "   $_ = $($driftParams[$_])" }

          try {
              Test-PIMPolicyDrift @driftParams
              Write-Host "‚úÖ Policy drift check completed"
          }
          catch {
              Write-Warning "‚ö†Ô∏è  Policy drift check failed: $_"
              Write-Host "üîß Error details: $($_.Exception.Message)"
              # Don't fail the workflow for drift check issues
          }

  generate-summary:
    name: 'Generate Summary'
    runs-on: ubuntu-latest
    needs: [authentication-test, policy-drift-check]
    if: always()

    steps:
      - name: 'Generate Workflow Summary'
        run: |
          echo "# üß™ EasyPIM CI/CD Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow Run:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Authentication Test results
          AUTH_STATUS="${{ needs.authentication-test.result }}"
          if [ "$AUTH_STATUS" = "success" ]; then
            echo "## ‚úÖ Authentication Test: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "- All authentication components verified" >> $GITHUB_STEP_SUMMARY
            echo "- EasyPIM modules installed successfully" >> $GITHUB_STEP_SUMMARY
            echo "- Key Vault access confirmed" >> $GITHUB_STEP_SUMMARY
            echo "- Microsoft Graph connectivity verified" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ‚ùå Authentication Test: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "- Authentication test failed" >> $GITHUB_STEP_SUMMARY
            echo "- Check logs for detailed error information" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          # Drift check results
          DRIFT_STATUS="${{ needs.policy-drift-check.result }}"
          if [ "$DRIFT_STATUS" = "success" ]; then
            echo "## ‚úÖ Policy Drift Check: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "- Policy drift detection completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ‚ö†Ô∏è Policy Drift Check: COMPLETED WITH WARNINGS" >> $GITHUB_STEP_SUMMARY
            echo "- Drift check may have found issues or warnings" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìä Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Apply Mode**: ${{ github.event.inputs.apply || 'false' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Mode**: ${{ github.event.inputs.mode || 'delta' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Skip Policies**: ${{ github.event.inputs.skip_policies || 'true' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Skip Assignments**: ${{ github.event.inputs.skip_assignments || 'false' }}" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üîó Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the uploaded logs for detailed execution information" >> $GITHUB_STEP_SUMMARY
          echo "2. Check policy drift results for any configuration discrepancies" >> $GITHUB_STEP_SUMMARY
          echo "3. If running in preview mode, consider applying changes by setting apply=true" >> $GITHUB_STEP_SUMMARY
          echo "4. Review EasyPIM documentation for configuration guidance" >> $GITHUB_STEP_SUMMARY
