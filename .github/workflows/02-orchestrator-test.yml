name: 'Phase 2: EasyPIM Orchestrator Test'

on:
  workflow_dispatch:
    inputs:
      WhatIf:
        description: "Preview mode - show what would be done without making changes"
        required: false
        default: true
        type: boolean
      Mode:
        description: "Orchestrator execution mode (delta=incremental, initial=destructive cleanup)"
        required: false
        default: "delta"
        type: choice
        options:
          - delta
          - initial
      SkipPolicies:
        description: "Skip policy operations (assignments only)"
        required: false
        default: false
        type: boolean
      SkipAssignments:
        description: "Skip assignment operations (policies only)"
        required: false
        default: false
        type: boolean
      Force:
        description: "Force execution (bypass confirmations)"
        required: false
        default: false
        type: boolean
      Verbose:
        description: "Enable verbose output"
        required: false
        default: false
        type: boolean
      ExportWouldRemove:
        description: "Export list of items that would be removed (audit purposes)"
        required: false
        default: false
        type: boolean

env:
  KEYVAULT_NAME: ${{ vars.AZURE_KEYVAULT_NAME }}
  SECRET_NAME: ${{ vars.AZURE_KEYVAULT_SECRET_NAME }}
  TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}

permissions:
  id-token: write   # for OIDC
  contents: read

jobs:
  easypim-orchestrator:
    name: 'EasyPIM Orchestrator Execution'
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Azure OIDC Login'
        uses: azure/login@v2
        with:
          tenant-id: ${{ env.TENANT_ID }}
          subscription-id: ${{ env.SUBSCRIPTION_ID }}
          client-id: ${{ env.AZURE_CLIENT_ID }}
          enable-AzPSSession: true

      - name: 'Setup Authentication'
        shell: pwsh
        run: |
          $authResult = & "./scripts/workflows/Setup-EasyPIMAuthentication.ps1" -TenantId "$env:TENANT_ID" -SubscriptionId "$env:SUBSCRIPTION_ID" -ClientId "$env:AZURE_CLIENT_ID"
          if (-not $authResult) {
            Write-Error "❌ Authentication setup failed"
            exit 1
          }

      - name: 'Install EasyPIM Modules'
        shell: pwsh
        run: |
          & "./scripts/workflows/Install-EasyPIMModules.ps1"

      - name: 'Configure Execution Parameters'
        shell: pwsh
        run: |
          Write-Host "🔧 Configuring execution parameters..." -ForegroundColor Cyan

          # Parse workflow inputs
          $whatIf = '${{ github.event.inputs.WhatIf }}' -eq 'true'
          $mode = if ('${{ github.event.inputs.Mode }}') { '${{ github.event.inputs.Mode }}' } else { 'delta' }
          $skipPolicies = '${{ github.event.inputs.SkipPolicies }}' -eq 'true'
          $skipAssignments = '${{ github.event.inputs.SkipAssignments }}' -eq 'true'
          $force = '${{ github.event.inputs.Force }}' -eq 'true'
          $verbose = '${{ github.event.inputs.Verbose }}' -eq 'true'
          $exportWouldRemove = '${{ github.event.inputs.ExportWouldRemove }}' -eq 'true'

          Write-Host "📊 Execution Parameters:" -ForegroundColor Blue
          Write-Host "   WhatIf: $whatIf"
          Write-Host "   Mode: $mode"
          Write-Host "   Skip Policies: $skipPolicies"
          Write-Host "   Skip Assignments: $skipAssignments"
          Write-Host "   Force: $force"
          Write-Host "   Verbose: $verbose"
          Write-Host "   Export WouldRemove: $exportWouldRemove"

          # Build orchestrator parameters
          $orchestratorParams = @{
              'TenantId' = $env:TENANT_ID
              'SubscriptionId' = $env:SUBSCRIPTION_ID
              'Mode' = $mode
          }

          # Configuration source
          if ($env:KEYVAULT_NAME) {
              Write-Host "📋 Using configuration from Key Vault: $env:KEYVAULT_NAME" -ForegroundColor Green
              $orchestratorParams['KeyVaultName'] = $env:KEYVAULT_NAME
              $orchestratorParams['SecretName'] = $env:SECRET_NAME
          } else {
              Write-Host "📋 Using local configuration file" -ForegroundColor Green
              $orchestratorParams['ConfigFilePath'] = "./configs/pim-config.json"
          }

          # Add conditional parameters
          if ($whatIf) {
              $orchestratorParams['WhatIf'] = $true
              Write-Host "⚠️  Running in PREVIEW mode (-WhatIf)" -ForegroundColor Yellow
          } else {
              Write-Host "🚨 Running in APPLY mode (changes will be made)" -ForegroundColor Red
          }

          if ($skipPolicies) {
              $orchestratorParams['SkipPolicies'] = $true
              Write-Host "⏭️  Skipping policy operations" -ForegroundColor Yellow
          }

          if ($skipAssignments) {
              $orchestratorParams['SkipAssignments'] = $true
              Write-Host "⏭️  Skipping assignment operations" -ForegroundColor Yellow
          }

          if ($force) {
              $orchestratorParams['Force'] = $true
              Write-Host "💪 Force mode enabled (bypassing confirmations)" -ForegroundColor Yellow
          }

          if ($verbose) {
              $orchestratorParams['Verbose'] = $true
              Write-Host "📝 Verbose output enabled" -ForegroundColor Blue
          }

          if ($exportWouldRemove) {
              $orchestratorParams['WouldRemoveExportPath'] = "./audit-exports"
              Write-Host "📤 WouldRemove export enabled (audit purposes)" -ForegroundColor Blue
              # Ensure export directory exists
              New-Item -ItemType Directory -Path "./audit-exports" -Force | Out-Null
          }

          # Store parameters as environment variable for next step (GitHub Actions format)
          $paramsJson = $orchestratorParams | ConvertTo-Json -Depth 3 -Compress
          echo "ORCHESTRATOR_PARAMS=$paramsJson" >> $env:GITHUB_ENV
          Write-Host "✅ Parameters configured successfully" -ForegroundColor Green

      - name: 'Execute EasyPIM Orchestrator'
        shell: pwsh
        run: |
          # Retrieve parameters from environment
          if (-not $env:ORCHESTRATOR_PARAMS) {
              Write-Error "❌ ORCHESTRATOR_PARAMS environment variable is null or missing"
              exit 1
          }

          Write-Host "🔧 Retrieved parameters from environment" -ForegroundColor Blue
          $orchestratorParams = $env:ORCHESTRATOR_PARAMS | ConvertFrom-Json -AsHashtable

          # Execute using the dedicated script WITH ultimate telemetry wrapper
          Write-Host "🎯 Using Ultimate Telemetry Wrapper for guaranteed telemetry events!" -ForegroundColor Magenta
          & "./scripts/workflows/Invoke-EasyPIMExecution.ps1" -OrchestratorParams $orchestratorParams -UseUltimateWrapper

      - name: 'Upload EasyPIM Logs and Artifacts'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: easypim-logs-${{ github.run_number }}
          path: |
            **/*.log
            LOGS/**/*
            audit-exports/**/*
            easypim-*.log
            *transcript*.log
            *summary*.log
            *error*.log
          retention-days: 30

  generate-summary:
    name: 'Generate Summary'
    runs-on: ubuntu-latest
    needs: easypim-orchestrator
    if: always()

    steps:
      - name: 'Generate Workflow Summary'
        run: |
          echo "# 🧪 EasyPIM CI/CD Test Results - Phase 2" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow Run:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Orchestrator results
          ORCHESTRATOR_STATUS="${{ needs.easypim-orchestrator.result }}"
          if [ "$ORCHESTRATOR_STATUS" = "success" ]; then
            echo "## ✅ EasyPIM Orchestrator: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "- Configuration processed successfully" >> $GITHUB_STEP_SUMMARY
            echo "- ARM API authentication working with updated EasyPIM" >> $GITHUB_STEP_SUMMARY
            echo "- No manual hotfix required" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ EasyPIM Orchestrator: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "- Orchestrator execution failed" >> $GITHUB_STEP_SUMMARY
            echo "- Check logs for detailed error information" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **WhatIf Mode**: ${{ github.event.inputs.WhatIf || 'true' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Mode**: ${{ github.event.inputs.Mode || 'delta' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Skip Policies**: ${{ github.event.inputs.SkipPolicies || 'false' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Skip Assignments**: ${{ github.event.inputs.SkipAssignments || 'false' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Force**: ${{ github.event.inputs.Force || 'false' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Verbose**: ${{ github.event.inputs.Verbose || 'false' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Export WouldRemove**: ${{ github.event.inputs.ExportWouldRemove || 'false' }}" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔗 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the uploaded logs for detailed execution information" >> $GITHUB_STEP_SUMMARY
          echo "2. Run Phase 3 workflow to check for policy drift" >> $GITHUB_STEP_SUMMARY
          echo "3. If running in preview mode, consider applying changes by setting WhatIf=false" >> $GITHUB_STEP_SUMMARY
          echo "4. Review EasyPIM documentation for configuration guidance" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "**📝 Note**: This workflow uses the updated EasyPIM with native ARM API OIDC support." >> $GITHUB_STEP_SUMMARY
          echo "The manual ARM authentication hotfix is no longer required." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**🔍 Backup**: Previous working version with hotfix is saved as '02-orchestrator-test-BACKUP-with-hotfix.yml'" >> $GITHUB_STEP_SUMMARY
